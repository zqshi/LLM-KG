name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 质量检查任务
  quality-check:
    runs-on: ubuntu-latest
    name: Code Quality & Testing
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Type checking
      run: npm run typecheck
      
    - name: ESLint checking
      run: npm run lint
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # TDD验收测试
  tdd-acceptance:
    runs-on: ubuntu-latest
    name: TDD Acceptance Tests
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Configuration Management Tests
      run: npx vitest run tests/unit/config-management.test.ts --reporter=verbose
      
    - name: Run Audit Logs Tests
      run: npx vitest run tests/unit/audit-logs.test.ts --reporter=verbose
      
    - name: Run Operations Monitoring Tests
      run: npx vitest run tests/unit/operations-monitoring.test.ts --reporter=verbose
      
    - name: Check Test Coverage Thresholds
      run: |
        npm run test:coverage
        echo "✅ 所有TDD测试用例通过，覆盖率达标"

  # 构建验证
  build:
    runs-on: ubuntu-latest
    name: Build Verification
    needs: [quality-check, tdd-acceptance]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Check build artifacts
      run: |
        if [ ! -d "dist" ]; then
          echo "❌ 构建失败：dist目录不存在"
          exit 1
        fi
        echo "✅ 构建成功"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/
        retention-days: 7

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      if: always()
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true

  # 部署准备（仅在main分支）
  deploy-prep:
    runs-on: ubuntu-latest
    name: Deploy Preparation
    needs: [build, tdd-acceptance, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: dist/
        
    - name: Prepare deployment package
      run: |
        tar -czf deployment-package.tar.gz dist/
        echo "✅ 部署包准备完成"
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-package.tar.gz
        retention-days: 30

# Notification Job
  notify:
    runs-on: ubuntu-latest
    name: Notify Results
    needs: [quality-check, tdd-acceptance, build, security-scan]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.quality-check.result == 'success' && needs.tdd-acceptance.result == 'success' && needs.build.result == 'success'
      run: |
        echo "🎉 所有检查通过！"
        echo "✅ 代码质量检查: 通过"
        echo "✅ TDD验收测试: 通过"
        echo "✅ 构建验证: 通过"
        echo "✅ 安全扫描: ${{ needs.security-scan.result }}"
        
    - name: Notify Failure
      if: needs.quality-check.result == 'failure' || needs.tdd-acceptance.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ 检查失败！"
        echo "代码质量检查: ${{ needs.quality-check.result }}"
        echo "TDD验收测试: ${{ needs.tdd-acceptance.result }}"
        echo "构建验证: ${{ needs.build.result }}"
        echo "安全扫描: ${{ needs.security-scan.result }}"
        exit 1